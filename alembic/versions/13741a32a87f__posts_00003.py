"""_posts_00003

Revision ID: 13741a32a87f
Revises: d6931db81268
Create Date: 2022-12-08 19:37:38.898996

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from sqlalchemy.orm import sessionmaker
from api.config import settings
Session = sessionmaker()

# revision identifiers, used by Alembic.
revision = '13741a32a87f'
down_revision = 'd6931db81268'
branch_labels = None
depends_on = None


def upgrade():
    op.create_table('posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('is_published', sa.Boolean(), server_default=sa.text('True'), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('time_created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('time_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('votes',
    sa.Column('id_user', sa.Integer(), nullable=False),
    sa.Column('id_post', sa.Integer(), nullable=False),
    sa.Column('time_created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('time_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['id_post'], ['posts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_user', 'id_post')
    )
    bind = op.get_bind()
    session = Session(bind=bind)
    session.execute("""
    CREATE TRIGGER update_timestamp
    BEFORE UPDATE
    ON posts
    FOR EACH ROW
    EXECUTE PROCEDURE update_timestamp();
    """)
    session.execute("""
    CREATE TRIGGER update_timestamp
    BEFORE UPDATE
    ON votes
    FOR EACH ROW
    EXECUTE PROCEDURE update_timestamp();
    """)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('votes')
    op.drop_table('posts')
    # ### end Alembic commands ###
